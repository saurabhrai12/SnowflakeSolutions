[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "snowflake-report-service"
version = "1.0.0"
description = "AWS ECS Fargate Python Report Generation Service for Snowflake"
requires-python = ">=3.11"
license = {text = "MIT"}
authors = [
    {name = "Analytics Team", email = "analytics@company.com"}
]
keywords = ["snowflake", "reports", "aws", "ecs", "fastapi"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Framework :: FastAPI",
]

dependencies = [
    # Core FastAPI and web framework
    "fastapi>=0.104.1,<0.105",
    "uvicorn[standard]>=0.24.0,<0.25",
    "pydantic>=2.5.0,<3.0",
    
    # Database connectivity
    "snowflake-connector-python>=3.6.0,<4.0",
    "pandas>=2.1.4,<3.0",
    
    # AWS services
    "boto3>=1.34.0,<2.0",
    "botocore>=1.34.0,<2.0",
    
    # Additional utilities
    "python-multipart>=0.0.6,<1.0",
    "python-json-logger>=2.0.7,<3.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.3",
    "pytest-asyncio>=0.21.1",
    "httpx>=0.25.2",
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.7.0",
    "pre-commit>=3.5.0",
]

test = [
    "pytest>=7.4.3",
    "pytest-asyncio>=0.21.1",
    "pytest-cov>=4.1.0",
    "httpx>=0.25.2",
    "factory-boy>=3.3.0",
]

monitoring = [
    "prometheus-client>=0.19.0",
    "opentelemetry-api>=1.21.0",
    "opentelemetry-sdk>=1.21.0",
    "opentelemetry-instrumentation-fastapi>=0.42b0",
]

[project.urls]
Homepage = "https://github.com/company/snowflake-solutions"
Documentation = "https://docs.company.com/snowflake-report-service"
Repository = "https://github.com/company/snowflake-solutions"
Issues = "https://github.com/company/snowflake-solutions/issues"

[project.scripts]
start-server = "snowflake_report_service.main:main"

[tool.hatch.build.targets.wheel]
packages = ["src/snowflake_report_service"]

[tool.black]
line-length = 100
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 100
known_first_party = ["snowflake_report_service"]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "snowflake.*",
    "boto3.*",
    "botocore.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--cov=src/snowflake_report_service",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["src"]
omit = ["tests/*", "*/venv/*", "*/.venv/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]